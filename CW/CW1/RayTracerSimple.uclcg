// filename: cw1_student.uclcg
// tabGroup: Coursework
// thumbnail: cw1_thumb.png
// displayname: Coursework 1 - 2021/2022
// shortDescription: Coursework 1 - Ray Tracing
// author: None
// isHidden: false 
function setup()
{
	UI = {};
	UI.tabs = [];
	UI.titleLong = 'Ray Tracer';
	UI.titleShort = 'RayTracerSimple';
	UI.numFrames = 100000;
	UI.maxFPS = 24;
	UI.renderWidth = 1600;
	UI.renderHeight = 800;

	UI.tabs.push(
		{
		visible: true,
		type: `x-shader/x-fragment`,
		title: `RaytracingDemoFS - GL`,
		id: `RaytracingDemoFS`,
		initialValue: `#define SOLUTION_CYLINDER_AND_PLANE
#define SOLUTION_SHADOW
#define SOLUTION_REFLECTION_REFRACTION
#define SOLUTION_FRESNEL
//#define SOLUTION_BOOLEAN

precision highp float;
uniform ivec2 viewport; 

struct PointLight {
	vec3 position;
	vec3 color;
};

struct Material {
	vec3  diffuse;
	vec3  specular;
	float glossiness;
	float reflection;
	float refraction;
	float ior;
};

struct Sphere {
	vec3 position;
	float radius;
	Material material;
};

struct Plane {
	vec3 normal;
	float d;
	Material material;
};

struct Cylinder {
	vec3 position;
	vec3 direction;  
	float radius;
	Material material;
};

#define BOOLEAN_MODE_AND 0			// and 
#define BOOLEAN_MODE_MINUS 1			// minus 

struct Boolean {
    Sphere spheres[2];
    int mode;
};


const int lightCount = 2;
const int sphereCount = 3;
const int planeCount = 1;
const int cylinderCount = 2;
const int booleanCount = 2; 

struct Scene {
	vec3 ambient;
	PointLight[lightCount] lights;
	Sphere[sphereCount] spheres;
	Plane[planeCount] planes;
	Cylinder[cylinderCount] cylinders;
    Boolean[booleanCount] booleans;
};

struct Ray {
	vec3 origin;
	vec3 direction;
};

// Contains all information pertaining to a ray/object intersection
struct HitInfo {
	bool hit;
	float t;
	vec3 position;
	vec3 normal;
	Material material;
	bool enteringPrimitive;
};

HitInfo getEmptyHit() {
	return HitInfo(
		false, 
		0.0, 
		vec3(0.0), 
		vec3(0.0), 
		Material(vec3(0.0), vec3(0.0), 0.0, 0.0, 0.0, 0.0),
		false);
}

// Sorts the two t values such that t1 is smaller than t2
void sortT(inout float t1, inout float t2) {
	// Make t1 the smaller t
	if(t2 < t1)  {
		float temp = t1;
		t1 = t2;
		t2 = temp;
	}
}

// Tests if t is in an interval
bool isTInInterval(const float t, const float tMin, const float tMax) {
	return t > tMin && t < tMax;
}

// Get the smallest t in an interval.
bool getSmallestTInInterval(float t0, float t1, const float tMin, const float tMax, inout float smallestTInInterval) {
  
	sortT(t0, t1);

	// As t0 is smaller, test this first
	if(isTInInterval(t0, tMin, tMax)) {
		smallestTInInterval = t0;
		return true;
	}

	// If t0 was not in the interval, still t1 could be
	if(isTInInterval(t1, tMin, tMax)) {
		smallestTInInterval = t1;
		return true;
	}  

	// None was
	return false;
}

HitInfo intersectSphere(const Ray ray, const Sphere sphere, const float tMin, const float tMax) {
              
    vec3 to_sphere = ray.origin - sphere.position;
  
    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(ray.direction, to_sphere);
    float c = dot(to_sphere, to_sphere) - sphere.radius * sphere.radius;
    float D = b * b - 4.0 * a * c;
    if (D > 0.0)
    {
		float t0 = (-b - sqrt(D)) / (2.0 * a);
		float t1 = (-b + sqrt(D)) / (2.0 * a);
      
      	float smallestTInInterval;
      	if(!getSmallestTInInterval(t0, t1, tMin, tMax, smallestTInInterval)) {
          return getEmptyHit();
        }
      
      	vec3 hitPosition = ray.origin + smallestTInInterval * ray.direction;      
		
		//Checking if we're inside the sphere by checking if the ray's origin is inside. If we are, then the normal 
		//at the intersection surface points towards the center. Otherwise, if we are outside the sphere, then the normal 
		//at the intersection surface points outwards from the sphere's center. This is important for refraction.
      	vec3 normal = 
          	length(ray.origin - sphere.position) < sphere.radius + 0.001? 
          	-normalize(hitPosition - sphere.position): 
      		normalize(hitPosition - sphere.position);      
		
		//Checking if we're inside the sphere by checking if the ray's origin is inside,
		// but this time for IOR bookkeeping. 
		//If we are inside, set a flag to say we're leaving. If we are outside, set the flag to say we're entering.
		//This is also important for refraction.
		bool enteringPrimitive = 
          	length(ray.origin - sphere.position) < sphere.radius + 0.001 ? 
          	false:
		    true; 

        return HitInfo(
          	true,
          	smallestTInInterval,
          	hitPosition,
          	normal,
          	sphere.material,
			enteringPrimitive);
    }
    return getEmptyHit();
}

HitInfo intersectPlane(const Ray ray,const Plane plane, const float tMin, const float tMax) {
	/*
	Explanation of Ray-Plane Intersection
	The equation of a ray is P = P0 + t * V
	The equation of a plane is 0 = P dot N + d
	Where:
		- P = Point of Intersection
		- P0 = Origin of ray
		- t = Time of movement
	 	- V = ray's direction
		- N = plane's normal
	 	- d = Displacement of the plane	
	By substituting for P, we can find: 0 = (P0 + t * V) dot N + d
	Then, we can use this equation to find a formula for t: t = -(P0 dot N + d) / (V dot N)	
	https://www.cs.princeton.edu/courses/archive/fall00/cs426/lectures/raycast/sld017.htm
	*/
#ifdef SOLUTION_CYLINDER_AND_PLANE
	float d = dot(ray.direction, plane.normal);		// V dot N
	float t;
	vec3 hitPosition;	// Will be the value of Point of Intersection
	
	// Checking if it is not equal to zero because we tried to check that the ray that is sent to the plane
	// is not parallel to the plane. If the dot product of V and N is 0, it means they are perpendicular to each other
	// If they are perpendicular, there will be no intersection between the ray and the plane. 
	if(d != 0.0){	
		t = (dot(ray.origin, plane.normal) + plane.d) / d;
		// Checking if t value is between our range.
		// If t is greater than tMax, ray is hitting a plane too far in scene
		// If t is smaller than tMin, ray is not hitting any planes in the scene
		// For both cases, the code returns getEmptyHit() to show that the ray does not intersect with anything. 
		if(!isTInInterval(t, tMin, tMax)){
			return getEmptyHit();
		}
		
		hitPosition = ray.origin + t * ray.direction;
		return HitInfo(
			true,
			t,
			hitPosition,
			plane.normal,
			plane.material,
			false
		);
	}
	
#endif  
		return getEmptyHit();
}

float lengthSquared(vec3 x) {
	return dot(x, x);
}

HitInfo intersectCylinder(const Ray ray, const Cylinder cylinder, const float tMin, const float tMax) {

	/*
	Explanation of Ray-Cylinder Intersection

	Ray Equation : P = P0 + t * V
	Cylinder Equation : r^2 = (P - Pc - (Vc dot P - Pc) * Vc)^2
	Where:
		- P : Point of Intersection
		- P0 : Ray's origin
		- t : Time of Movement
		- V : Ray's direction
		- r : Cylinder's radius
		- Pc : Center point of cylinder's caps
		- Vc : Direction of Pc/Cylinder
		
	Let's say we have Tc = (Vc dot P - Pc)
	If we use Vc, Tc, and Pc, we can come up with a line equation : Pc + Vc * Tc
	
	So, cylinder equation can be interpreted as a r radius cylinder which is rotated along the line Pc + TcVc
	
	Using these, we can come up with:
	r^2 = (P - Pc + V * t - (Vc dot P - Pc + V * t) * Vc)^2
	
	If we rearrange the formula according to quadratic equation : a * t^2 + b * t + c = 0:
		- a = (V - (V dot Vc) * Vc)^2
		- b = 2 * ((V - (V dot Vc) * Va) dot (D - (D dot Vc) * Vc))
		- c = (D - (D dot Vc) * Vc)^2 - r^2
		- d = P - Pc
	https://mrl.nyu.edu/~dzorin/rend05/lecture2.pdf
	*/
	
#ifdef SOLUTION_CYLINDER_AND_PLANE
	vec3 toCylinder = ray.origin - cylinder.position;  // Value of d
	vec3 V = ray.direction;
	vec3 Vc = cylinder.direction;
	
	float a = dot((V - dot(V,Vc) * Vc),(V - dot(V,Vc) * Vc));
	float b = 2.0 * dot((V - dot(V,Vc) * Vc),(toCylinder - dot(toCylinder,Vc) * Vc));
	float c = dot((toCylinder - dot(toCylinder, Vc) * Vc),(toCylinder - dot(toCylinder, Vc) * Vc)) - cylinder.radius * cylinder.radius;
	float discriminant = b * b - 4.0 * a * c;
	
	// Calculates the roots if there are any
	if(discriminant > 0.0){
		float x0 = (-b - sqrt(discriminant)) / (2.0 * a);
		float x1 = (-b + sqrt(discriminant)) / (2.0 * a);
		
		float smallestT; // Smallest t value gives the closest point to the ray's origin. 
	
		if(!getSmallestTInInterval(x0, x1, tMin, tMax, smallestT)){
			return getEmptyHit();
		}
		
		vec3 hitPosition = ray.origin + smallestT * ray.direction;
		vec3 vec1 = hitPosition - cylinder.position;
		vec3 normal = normalize(vec1 - dot(vec1,cylinder.direction)*cylinder.direction);
	
		return HitInfo(
			true,
			smallestT,
			hitPosition,
			normal,
			cylinder.material,
			false
		);
	}
	
#endif  
    return getEmptyHit();
}

bool inside(const vec3 position, const Sphere sphere) {
	return length(position - sphere.position) < sphere.radius;
}

HitInfo intersectBoolean(const Ray ray, const Boolean boolean, const float tMin, const float tMax) {
#ifdef SOLUTION_BOOLEAN
#else
    // Put your code for the boolean task in the #ifdef above!
#endif
    return getEmptyHit();
}

uniform float time;

HitInfo getBetterHitInfo(const HitInfo oldHitInfo, const HitInfo newHitInfo) {
	if(newHitInfo.hit)
  		if(newHitInfo.t < oldHitInfo.t)  // No need to test for the interval, this has to be done per-primitive
          return newHitInfo;
  	return oldHitInfo;
}

HitInfo intersectScene(const Scene scene, const Ray ray, const float tMin, const float tMax) {
	HitInfo bestHitInfo;
	bestHitInfo.t = tMax;
	bestHitInfo.hit = false;


	for (int i = 0; i < booleanCount; ++i) {
    	bestHitInfo = getBetterHitInfo(bestHitInfo, intersectBoolean(ray, scene.booleans[i], tMin, tMax));
	}

		for (int i = 0; i < planeCount; ++i) {
			bestHitInfo = getBetterHitInfo(bestHitInfo, intersectPlane(ray, scene.planes[i], tMin, tMax));
		}

		for (int i = 0; i < sphereCount; ++i) {
			bestHitInfo = getBetterHitInfo(bestHitInfo, intersectSphere(ray, scene.spheres[i], tMin, tMax));
		}

		for (int i = 0; i < cylinderCount; ++i) {
			bestHitInfo = getBetterHitInfo(bestHitInfo, intersectCylinder(ray, scene.cylinders[i], tMin, tMax));
		}
	
	return bestHitInfo;
}

vec3 shadeFromLight(
  const Scene scene,
  const Ray ray,
  const HitInfo hit_info,
  const PointLight light)
{ 
  vec3 hitToLight = light.position - hit_info.position;
  
  vec3 lightDirection = normalize(hitToLight);
  vec3 viewDirection = normalize(hit_info.position - ray.origin);
  vec3 reflectedDirection = reflect(viewDirection, hit_info.normal);
  float diffuse_term = max(0.0, dot(lightDirection, hit_info.normal));
  float specular_term  = pow(max(0.0, dot(lightDirection, reflectedDirection)), hit_info.material.glossiness);

#ifdef SOLUTION_SHADOW
	Ray shadowRay;
	float visibility = 1.0;
	shadowRay.origin = hit_info.position;
	shadowRay.direction = lightDirection;
	
	HitInfo test = intersectScene(scene, shadowRay, 0.001, length(hitToLight));
	if(test.hit){	// Detects shadow Ray intersections
		visibility = 0.0;	// If there is an intersection, then the visibility is 0. 
	}
#else
  float visibility = 1.0;
#endif
  return 	visibility * 
    		light.color * (
    		specular_term * hit_info.material.specular +
      		diffuse_term * hit_info.material.diffuse);
}

vec3 background(const Ray ray) {
  // A simple implicit sky that can be used for the background
  return vec3(0.2) + vec3(0.8, 0.6, 0.5) * max(0.0, ray.direction.y);
}

// It seems to be a WebGL issue that the third parameter needs to be inout instea dof const on Tobias' machine
vec3 shade(const Scene scene, const Ray ray, inout HitInfo hitInfo) {
	
  	if(!hitInfo.hit) {
  		return background(ray);
  	}
  
    vec3 shading = scene.ambient * hitInfo.material.diffuse;
    for (int i = 0; i < lightCount; ++i) {
        shading += shadeFromLight(scene, ray, hitInfo, scene.lights[i]); 
    }
    return shading;
}


Ray getFragCoordRay(const vec2 frag_coord) {
  	float sensorDistance = 1.0;
  	vec2 sensorMin = vec2(-1, -0.5);
  	vec2 sensorMax = vec2(1, 0.5);
  	vec2 pixelSize = (sensorMax- sensorMin) / vec2(viewport.x, viewport.y);
  	vec3 origin = vec3(0, 0, sensorDistance);
    vec3 direction = normalize(vec3(sensorMin + pixelSize * frag_coord, -sensorDistance));  
  
  	return Ray(origin, direction);
}

float fresnel(const vec3 viewDirection, const vec3 normal, const float sourceIOR, const float destIOR) {
	/*
	Explanation of Fresnel
	In reality, a trasnparent medium is both reflective and refractive. This Fresnel method calculates how much of the light
	should be reflected and how much of it should be refracted. It splits light into parallel and perpendicular polarised light.
	
	The equation is:
		- Fparallel = (eta2 * cos(Theta1) - eta1 * cos(Theta2) / (eta2 * cos(Theta1) + eta1 * cos(Theta2)))^2
		- Fperpendicular = (eta1 * cos(Theta2) - eta2 * cos(Theta1) / (eta1 * cos(Theta2) + eta2 * cos(Theta1)))^2
		- Freflection = 0.5 * (Fparallel + Fperpendicular)
		- Frefraction = 1 - Freflection
	
	Where:
		- Theta1 : angle of incedent
		- Theta2 : angle of reflection

	Schlick's approximation is another approach to this. 
	According to it:
		- Rschlick = r0 + (1.0 - r0) * (1.0 - cos(the angle of incident))^exponent
		- r0 = ((eta1 - eta2) / (eta1 + eta2))^2
		
	In this equation the exponent controls the powers of the output. 	
	https://graphicscompendium.com/raytracing/11-fresnel-beer
	
	*/
#ifdef SOLUTION_FRESNEL
	float sinTransmitted;	// This is sin(refractedAngle)
	float cosIncident = dot(viewDirection, normal);	// cos(the angle of incident)
	
	if(cosIncident >= 1.0){
		cosIncident = 1.0;
	} else if(cosIncident <= -1.0){
		cosIncident = -1.0;
	} else{
		cosIncident = cosIncident;
	}
	
	float eta1 = 1.0;
	float eta2 = destIOR;
	float temp = 1.0 - cosIncident * cosIncident;
	
	if(temp >= 0.0){
		temp = temp;
	} else{
		temp = 0.0;
	}
	
	sinTransmitted = (eta1 / eta2) * sqrt(temp);
	
	float rs;
	float r0 = (eta1 - eta2) / (eta1 + eta2);
	r0 = r0 * r0;
	float tempCos = 1.0 - sinTransmitted * sinTransmitted;
	
	if(tempCos >= 0.0){
		tempCos = tempCos;
	} else{
		tempCos = 0.0;
	}
	
	float cosTransmitted = sqrt(tempCos);	// This defines cos(refractedAngle)
	cosIncident = abs(cosIncident);
	
	float baseI = (1.0 - cosIncident);
	float baseT = (1.0 - cosTransmitted);
	
	if(eta1 <= eta2){
		rs = r0 + (1.0 - r0) * pow(baseI, 2.0);
	} else if((eta1 > eta2) && ((sinTransmitted * sinTransmitted) <= 1.0)){
		rs = r0 + (1.0 - r0) * pow(baseT, 2.0);
	} else if((eta1 > eta2) && ((sinTransmitted * sinTransmitted) > 1.0)){
		rs = 1.0;
	}
	
	return rs;
	
#else
  	// Put your code to compute the Fresnel effect in the ifdef above
	return 1.0;
#endif
}

vec3 colorForFragment(const Scene scene, const vec2 fragCoord) {
      
    Ray initialRay = getFragCoordRay(fragCoord);  
  	HitInfo initialHitInfo = intersectScene(scene, initialRay, 0.001, 10000.0);  
  	vec3 result = shade(scene, initialRay, initialHitInfo);
	
  	Ray currentRay;
  	HitInfo currentHitInfo;
  	
  	// Compute the reflection
  	currentRay = initialRay;
  	currentHitInfo = initialHitInfo;
  	
  	// The initial strength of the reflection
  	float reflectionWeight = 1.0;
	
	// The initial medium is air
  	float currentIOR = 1.0;
	
    float sourceIOR = 1.0;
	float destIOR = 1.0;
  	
  	const int maxReflectionStepCount = 2;
  	for(int i = 0; i < maxReflectionStepCount; i++) {
      
      if(!currentHitInfo.hit) break;
      
#ifdef SOLUTION_REFLECTION_REFRACTION
		reflectionWeight *= currentHitInfo.material.reflection;
#else
      // Put your reflection weighting code in the ifdef above
#endif
      
#ifdef SOLUTION_FRESNEL
		reflectionWeight *= fresnel(currentRay.direction, currentHitInfo.normal, currentHitInfo.material.ior, 1.0);
#else
      // Replace with Fresnel code in the ifdef above
      reflectionWeight *= 0.5;
#endif
      
      Ray nextRay;
#ifdef SOLUTION_REFLECTION_REFRACTION
		/*
		Reflection is a light hits the surface with angle theta and reflected with the angle theta along the surface normal.
		The reflected ray's starting point will be the same point on the surface as the first emergin ray.
		So the reflected ray's origin will be equal to first ray's hit position.
		
		The reflect method inputs the incident vector and the surface normal. 
		It does the operation : incidentVector - 2.0 * dot(surfaceNormal, incidentVector) * surfaceNormal
		This will calculate the direction of the reflected ray.
		Therefore, this part finds the origin and direction of the reflected ray.
		https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-shading/reflection-refraction-fresnel
		*/
		nextRay.origin = currentHitInfo.position;
		nextRay.direction = reflect(currentRay.direction, currentHitInfo.normal);
#else
	// Put your code to compute the reflection ray in the ifdef above
#endif
      currentRay = nextRay;
      
      currentHitInfo = intersectScene(scene, currentRay, 0.001, 10000.0);      
            
      result += reflectionWeight * shade(scene, currentRay, currentHitInfo);
    }
  
  	// Compute the refraction
  	currentRay = initialRay;  
  	currentHitInfo = initialHitInfo;
   
  	// The initial strength of the refraction.
  	float refractionWeight = 1.0;
  
  	const int maxRefractionStepCount = 2;
  	for(int i = 0; i < maxRefractionStepCount; i++) {
      
#ifdef SOLUTION_REFLECTION_REFRACTION
		refractionWeight *= currentHitInfo.material.refraction;
#else
      // Put your refraction weighting code in the ifdef above
      refractionWeight *= 0.5;      
#endif

#ifdef SOLUTION_FRESNEL
		refractionWeight *= (1.0 - fresnel(currentRay.direction, currentHitInfo.normal, 1.0, currentHitInfo.material.ior));
#else
      // Put your Fresnel code in the ifdef above 
#endif      

      Ray nextRay;


#ifdef SOLUTION_REFLECTION_REFRACTION 
		/*
		Refract method inputs incident vector I, normal vector N, and the ratio of indices of refraction eta.
		It outputs the refraction vector R. 
		
		When it is called it does the following operations:
			- k = 1.0 - eta * eta * (1.0 - dot(N,I) * dot(N,I))
			- if k is smaller then 0.0 then genType(0,0)
			- else R will be equal to eta * I - (eta * dot(N,I) + sqrt(k)) * N
			
		https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-shading/reflection-refraction-fresnel
		*/
		vec3 normal = currentHitInfo.normal;
		float eta;
		
		// This checks the location of the ray.  
		// If currentHitInfo.enteringPrimitive is true, the ray out the object and it is entering the object. 
		// If it is false, the ray is in the object.
		if(currentHitInfo.enteringPrimitive){
			eta = 1.0 / currentHitInfo.material.ior;
		} else{
			eta = currentHitInfo.material.ior ;
		}
		
		nextRay.direction = refract(currentRay.direction, normal, eta);
		nextRay.origin = currentHitInfo.position;	
		
		currentRay = nextRay;
		currentIOR = currentHitInfo.material.refraction;
		
#else
      float sourceIOR;
	  float destIOR;
	// Put your code to compute the reflection ray and track the IOR in the ifdef above
#endif
      currentHitInfo = intersectScene(scene, currentRay, 0.001, 10000.0);
            
      result += refractionWeight * shade(scene, currentRay, currentHitInfo);
      
      if(!currentHitInfo.hit) break;
    }
  return result;
}

Material getDefaultMaterial() {
  return Material(vec3(0.3), vec3(0), 0.0, 0.0, 0.0, 0.0);
}

Material getPaperMaterial() {
  return Material(vec3(0.7, 0.7, 0.7), vec3(0, 0, 0), 5.0, 0.0, 0.0, 0.0);
}

Material getPlasticMaterial() {
	return Material(vec3(0.9, 0.3, 0.1), vec3(1.0), 10.0, 0.9, 0.0, 0.0);
}

Material getGlassMaterial() {
	return Material(vec3(0.0), vec3(0.0), 5.0, 1.0, 1.0, 1.5);
}

Material getSteelMirrorMaterial() {
	return Material(vec3(0.1), vec3(0.3), 20.0, 0.8, 0.0, 0.0);
}

Material getMetaMaterial() {
	return Material(vec3(0.1, 0.2, 0.5), vec3(0.3, 0.7, 0.9), 20.0, 0.8, 0.0, 0.0);
}

vec3 tonemap(const vec3 radiance) {
  const float monitorGamma = 2.0;
  return pow(radiance, vec3(1.0 / monitorGamma));
}

void main() {
	// Setup scene
	Scene scene;
	scene.ambient = vec3(0.12, 0.15, 0.2);

	scene.lights[0].position = vec3(5, 15, -5);
	scene.lights[0].color    = 0.5 * vec3(0.9, 0.5, 0.1);

	scene.lights[1].position = vec3(-15, 5, 2);
	scene.lights[1].color    = 0.5 * vec3(0.1, 0.3, 1.0);

	// Primitives
    bool soloBoolean = false;
	
	#ifdef SOLUTION_BOOLEAN
	#endif

	if(!soloBoolean) {
		scene.spheres[0].position            	= vec3(10, -5, -16);
		scene.spheres[0].radius              	= 6.0;
		scene.spheres[0].material 				= getPaperMaterial();

		scene.spheres[1].position            	= vec3(-7, -2, -13);
		scene.spheres[1].radius             	= 4.0;
		scene.spheres[1].material				= getPlasticMaterial();

		scene.spheres[2].position            	= vec3(0, 0.5, -5);
		scene.spheres[2].radius              	= 2.0;
		scene.spheres[2].material   			= getGlassMaterial();

		scene.planes[0].normal            		= normalize(vec3(0, 1.0, 0));
		scene.planes[0].d              			= -4.5;
		scene.planes[0].material				= getSteelMirrorMaterial();

		scene.cylinders[0].position            	= vec3(-1, 1, -26);
		scene.cylinders[0].direction            = normalize(vec3(-2, 2, -1));
		scene.cylinders[0].radius         		= 1.5;
		scene.cylinders[0].material				= getPaperMaterial();

		scene.cylinders[1].position            	= vec3(4, 1, -5);
		scene.cylinders[1].direction            = normalize(vec3(1, 4, 1));
		scene.cylinders[1].radius         		= 0.4;
		scene.cylinders[1].material				= getPlasticMaterial();

	} else {
		scene.booleans[0].mode = BOOLEAN_MODE_MINUS;
		
		// sphere A 
		scene.booleans[0].spheres[0].position      	= vec3(3, 0, -10);
		scene.booleans[0].spheres[0].radius      	= 2.75;
		scene.booleans[0].spheres[0].material      	= getPaperMaterial();
		
		// sphere B
		scene.booleans[0].spheres[1].position      	= vec3(6, 1, -13);	
		scene.booleans[0].spheres[1].radius      	= 4.0;
		scene.booleans[0].spheres[1].material      	= getPaperMaterial();
		
		
		scene.booleans[1].mode = BOOLEAN_MODE_AND;
		
		scene.booleans[1].spheres[0].position      	= vec3(-3.0, 1, -12);
		scene.booleans[1].spheres[0].radius      	= 4.0;
		scene.booleans[1].spheres[0].material      	= getPaperMaterial();
		
		scene.booleans[1].spheres[1].position      	= vec3(-6.0, 1, -12);	
		scene.booleans[1].spheres[1].radius      	= 4.0;
		scene.booleans[1].spheres[1].material      	= getMetaMaterial();
		

		scene.planes[0].normal            		= normalize(vec3(0, 0.8, 0));
		scene.planes[0].d              			= -4.5;
		scene.planes[0].material				= getSteelMirrorMaterial();
		
		scene.lights[0].position = vec3(-5, 25, -5);
		scene.lights[0].color    = vec3(0.9, 0.5, 0.1);

		scene.lights[1].position = vec3(-15, 5, 2);
		scene.lights[1].color    = 0.0 * 0.5 * vec3(0.1, 0.3, 1.0);
		
	}

	// Compute color for fragment
	gl_FragColor.rgb = tonemap(colorForFragment(scene, gl_FragCoord.xy));
	gl_FragColor.a = 1.0;

}
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	UI.tabs.push(
		{
		visible: false,
		type: `x-shader/x-vertex`,
		title: `RaytracingDemoVS - GL`,
		id: `RaytracingDemoVS`,
		initialValue: `attribute vec3 position;
    uniform mat4 modelViewMatrix;
    uniform mat4 projectionMatrix;
  
    void main(void) {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	 return UI; 
}//!setup

var gl;
function initGL(canvas) {
	try {
		gl = canvas.getContext("experimental-webgl");
		gl.viewportWidth = canvas.width;
		gl.viewportHeight = canvas.height;
	} catch (e) {
	}
	if (!gl) {
		alert("Could not initialise WebGL, sorry :-(");
	}
}

function getShader(gl, id) {
	var shaderScript = document.getElementById(id);
	if (!shaderScript) {
		return null;
	}

	var str = "";
	var k = shaderScript.firstChild;
	while (k) {
		if (k.nodeType == 3) {
			str += k.textContent;
		}
		k = k.nextSibling;
	}

	var shader;
	if (shaderScript.type == "x-shader/x-fragment") {
		shader = gl.createShader(gl.FRAGMENT_SHADER);
	} else if (shaderScript.type == "x-shader/x-vertex") {
		shader = gl.createShader(gl.VERTEX_SHADER);
	} else {
		return null;
	}

    console.log(str);
	gl.shaderSource(shader, str);
	gl.compileShader(shader);

	if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
		alert(gl.getShaderInfoLog(shader));
		return null;
	}

	return shader;
}

function RaytracingDemo() {
}

RaytracingDemo.prototype.initShaders = function() {

	this.shaderProgram = gl.createProgram();

	gl.attachShader(this.shaderProgram, getShader(gl, "RaytracingDemoVS"));
	gl.attachShader(this.shaderProgram, getShader(gl, "RaytracingDemoFS"));
	gl.linkProgram(this.shaderProgram);

	if (!gl.getProgramParameter(this.shaderProgram, gl.LINK_STATUS)) {
		alert("Could not initialise shaders");
	}

	gl.useProgram(this.shaderProgram);

	this.shaderProgram.vertexPositionAttribute = gl.getAttribLocation(this.shaderProgram, "position");
	gl.enableVertexAttribArray(this.shaderProgram.vertexPositionAttribute);

	this.shaderProgram.projectionMatrixUniform = gl.getUniformLocation(this.shaderProgram, "projectionMatrix");
	this.shaderProgram.modelviewMatrixUniform = gl.getUniformLocation(this.shaderProgram, "modelViewMatrix");
}

RaytracingDemo.prototype.initBuffers = function() {
	this.triangleVertexPositionBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
	
	var vertices = [
		 -1,  -1,  0,
		 -1,  1,  0,
		 1,  1,  0,

		 -1,  -1,  0,
		 1,  -1,  0,
		 1,  1,  0,
	 ];
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
	this.triangleVertexPositionBuffer.itemSize = 3;
	this.triangleVertexPositionBuffer.numItems = 3 * 2;
}

function getTime() {  
	var d = new Date();
	return d.getMinutes() * 60.0 + d.getSeconds() + d.getMilliseconds() / 1000.0;
}

RaytracingDemo.prototype.drawScene = function() {
			
	var perspectiveMatrix = new J3DIMatrix4();	
	perspectiveMatrix.setUniform(gl, this.shaderProgram.projectionMatrixUniform, false);

	var modelViewMatrix = new J3DIMatrix4();	
	modelViewMatrix.setUniform(gl, this.shaderProgram.modelviewMatrixUniform, false);

	gl.uniform1f(gl.getUniformLocation(this.shaderProgram, "time"), getTime());
	
	gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
	gl.vertexAttribPointer(this.shaderProgram.vertexPositionAttribute, this.triangleVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
	
	gl.uniform2iv(gl.getUniformLocation(this.shaderProgram, "viewport"), [getRenderTargetWidth(), getRenderTargetHeight()]);

	gl.drawArrays(gl.TRIANGLES, 0, this.triangleVertexPositionBuffer.numItems);
}

RaytracingDemo.prototype.run = function() {
	this.initShaders();
	this.initBuffers();

	gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
	gl.clear(gl.COLOR_BUFFER_BIT);

	this.drawScene();
};

function init() {	
	

	env = new RaytracingDemo();	
	env.run();

    return env;
}

function compute(canvas)
{
    env.initShaders();
    env.initBuffers();

    gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
    gl.clear(gl.COLOR_BUFFER_BIT);

    env.drawScene();
}

